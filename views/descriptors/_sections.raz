@{
    var sectionDefenition = `
@section Scripts {
    <script type="text/javascript" src="/scripts/site.js"></script>
}`;
}

@{
    var model = {
        header: "Sections",
        content: 
        `
            A view can optionally reference one or more sections, by calling <code>@Html.section</code>. 
            Sections provide a way to organize where certain page elements should be placed. 
            Each call to <code>@Html.section</code> specifies a section name as the first parameter and whether that section is required or optional as the second one.
            <pre>@Html.section("Scripts", true)</pre>
            If a required section isn't found, an exception is thrown. 
            Individual views specify the content to be rendered within a section using the <code>@section{...}</code> Razor syntax. 
            If a page or view defines a section, it must be rendered (or an error will occur).
            An example <code>@section</code> definition:
            <pre>${Html.getEncoded(sectionDefenition)}</pre>
            In the preceding code, <i>scripts/site.js</i> is added to the scripts section on a page. 
            Other pages in the same app might not require this script and wouldn't define a scripts section.
            <br>
            Sections defined in a page are available in its layout page or parent page for partials views. 
            <br>
            <br>
            <div>
                <strong>NOTE:</strong>
                In <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/layout?view=aspnetcore-2.1#sections" target="_blank">ASP.NET MVC Razor</a> only immediate layout page can render a section and they cannot be referenced from partial views.
                In the current implementation of Razor syntax we don't have this limitation. 
                I can't see anything wrong with having some specific script or style in some partial view to be placed in a section. 
                Since partial views can be rendered on a page more than once, each its section is rendered only once.
                Also, you can have different sections defined in different files (views) with the same name. Then <code>@Html.section</code> will render
                all these sections in one specific place. Of course, you should take into account that the order in which the sections will be rendered 
                corresponds to <b>the rendering order of the views, partial views, and layouts</b>. 
                Sections can be defined and rendered even within the same (one) view, in this case the order is also important: definition must go before the reference.
            </div>
        `
    }
}
@Html.partial("_collapsibleBlock", model)